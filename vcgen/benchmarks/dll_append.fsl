
(Var x Loc)
(Var y Loc)
(Var nxt Loc)
(Var tmp Loc)
(Var ret Loc)

(Function next Loc Loc)
(Function prev Loc Loc)
(Function key Loc Int)
(RecFunction Dll Loc Bool)
(RecFunction Keys Loc SetInt)
(RecDef (Dll x) (ite (= x nil) True (ite (= (next x) nil) True
                                    (and (= x (prev (next x))) (Dll (next x)) (not (IsMember x (Sp (Dll (antiSp (next x)))))) ) 
                                    )
                )
)


(RecDef (Keys x) (ite (= x nil) EmptySetInt (SetAdd (Keys (next x)) (key x)) ))

(Var aux Loc)
(Var oldkeysx SetInt)
(Var oldkeysy SetInt)
(Var oldkeysaux SetInt)

(lemma (x) (= (Sp (Keys x)) (Sp (Dll x))))

(Program dll_append (x y oldkeysx oldkeysy ret))
(Pre (and
(Dll x) (Dll y)
(= EmptySetLoc (SetIntersect (Sp (Dll x)) (Sp (Dll y))))
(= oldkeysx (Keys x))
(= oldkeysy (Keys y))
))
(Post (and
(Dll ret)
(= (Keys ret) (SetUnion oldkeysx oldkeysy))
))

(If (= x nil)
Then
(assign ret y)
(return)
Else
(assign aux (next x))
(assume (= oldkeysaux (Keys aux)))
(call dll_append (aux y oldkeysaux oldkeysy tmp))
(assign (next x) tmp)
(assign (prev tmp) x)
(assign ret x)
(return)
)
