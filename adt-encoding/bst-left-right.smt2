(set-logic ALL_SUPPORTED)

;; heap
(declare-datatypes () ((TreeOfLoc (cons (head Int) (left TreeOfLoc) (right TreeOfLoc)) (empty))))

;; unint functions
(declare-fun nil () Int)
(declare-fun leftptr (Int) Int)
(declare-fun rightptr (Int) Int)
(declare-fun key (Int) Int)

;; recdefs
(declare-fun minr (TreeOfLoc) Int)
(declare-fun maxr (TreeOfLoc) Int)
(declare-fun htree (TreeOfLoc) (Set Int))
(declare-fun tree (TreeOfLoc) Bool)
(declare-fun bst (TreeOfLoc) Bool)

(define-fun min3 ((a Int) (b Int) (c Int)) Int
    (ite (< a b) (ite (< a c) a c) (ite (< b c) b c)))
(define-fun max3 ((a Int) (b Int) (c Int)) Int
    (ite (> a b) (ite (> a c) a c) (ite (> b c) b c)))

;; CVC4 hangs when given just the minr (or maxr) assertions

(assert (= (minr empty) 100))
(assert (forall ((k Int))
        (=> (and (not (= k nil)) (= (leftptr k) nil) (= (rightptr k) nil))
            (= (minr (cons k empty empty)) (key k)))
))
(assert (forall ((k Int) (kl Int) (xl TreeOfLoc) (yl TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) kl) (= (rightptr k) nil))
            (= (minr (cons k (cons kl xl yl) empty)) (min3 (key k) (minr (cons kl xl yl)) 100)))
))
(assert (forall ((k Int) (kr Int) (xr TreeOfLoc) (yr TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) nil) (= (rightptr k) kr))
            (= (minr (cons k empty (cons kr xr yr))) (min3 (key k) 100 (minr (cons kr xr yr)))))
))
(assert (forall ((k Int) (kl Int) (kr Int) 
                 (xl TreeOfLoc) (yl TreeOfLoc) (xr TreeOfLoc) (yr TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) kl) (= (rightptr k) kr))
            (= (minr (cons k (cons kl xl yl) (cons kr xr yr))) 
                     (min3 (key k) (minr (cons kl xl yl)) (minr (cons kr xr yr)))))
))

(assert (= (maxr empty) (- 1)))
(assert (forall ((k Int))
        (=> (and (not (= k nil)) (= (leftptr k) nil) (= (rightptr k) nil))
            (= (maxr (cons k empty empty)) (key k)))
))
(assert (forall ((k Int) (kl Int) (xl TreeOfLoc) (yl TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) kl) (= (rightptr k) nil))
            (= (maxr (cons k (cons kl xl yl) empty)) (max3 (key k) (maxr (cons kl xl yl)) (- 1))))
))
(assert (forall ((k Int) (kr Int) (xr TreeOfLoc) (yr TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) nil) (= (rightptr k) kr))
            (= (maxr (cons k empty (cons kr xr yr))) (max3 (key k) (- 1) (maxr (cons kr xr yr)))))
))
(assert (forall ((k Int) (kl Int) (kr Int) 
                 (xl TreeOfLoc) (yl TreeOfLoc) (xr TreeOfLoc) (yr TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) kl) (= (rightptr k) kr))
            (= (maxr (cons k (cons kl xl yl) (cons kr xr yr))) 
                     (max3 (key k) (maxr (cons kl xl yl)) (maxr (cons kr xr yr)))))
))

;; CVC4 also hangs when given just this htree definition

(assert (= (htree empty) (as emptyset (Set Int))))
(assert (forall ((k Int))
        (=> (and (not (= k nil)) (= (leftptr k) nil) (= (rightptr k) nil))
            (= (htree (cons k empty empty)) (singleton k)))
))
(assert (forall ((k Int) (kl Int) (xl TreeOfLoc) (yl TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) kl) (= (rightptr k) nil))
            (= (htree (cons k (cons kl xl yl) empty)) 
                      (insert k (htree (cons kl xl yl)))))
))
(assert (forall ((k Int) (kr Int) (xr TreeOfLoc) (yr TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) nil) (= (rightptr k) kr))
            (= (htree (cons k empty (cons kr xr yr))) 
                      (insert k (htree (cons kr xr yr)))))
))
(assert (forall ((k Int) (kl Int) (kr Int) 
                 (xl TreeOfLoc) (yl TreeOfLoc) (xr TreeOfLoc) (yr TreeOfLoc))
        (=> (and (not (= k nil)) (= (leftptr k) kl) (= (rightptr k) kr))
            (= (htree (cons k (cons kl xl yl) (cons kr xr yr))) 
                      (insert k (union (htree (cons kl xl yl)) (htree (cons kr xr yr))))))
))

;; binary tree definition (CVC4 hangs)

(assert (tree empty))
(assert (forall ((k Int))
        (= (tree (cons k empty empty))
           (and (not (= k nil)) (= (leftptr k) nil) (= (rightptr k) nil)))
))
(assert (forall ((k Int) (kl Int) (xl TreeOfLoc) (yl TreeOfLoc))
        (= (tree (cons k (cons kl xl yl) empty))
           (and (= (leftptr k) kl) (= (rightptr k) nil) (not (= k nil))
                (not (member k (htree (cons kl xl yl))))
                (tree (cons kl xl yl))))
))
(assert (forall ((k Int) (kr Int) (xr TreeOfLoc) (yr TreeOfLoc))
        (= (tree (cons k empty (cons kr xr yr)))
           (and (= (leftptr k) nil) (= (rightptr k) kr) (not (= k nil))
                (not (member k (htree (cons kr xr yr))))
                (tree (cons kr xr yr))))
))
(assert (forall ((k Int) (kl Int) (kr Int) 
                 (xl TreeOfLoc) (yl TreeOfLoc) (xr TreeOfLoc) (yr TreeOfLoc))
        (= (tree (cons k (cons kl xl yl) (cons kr xr yr)))
           (and (= (leftptr k) kl) (= (rightptr k) kr) (not (= k nil))
                (not (member k (htree (cons kl xl yl))))
                (not (member k (htree (cons kr xr yr))))
                (= (intersection (htree (cons kl xl yl)) (htree (cons kr xr yr)))
                   (as emptyset (Set Int)))
                (tree (cons kl xl yl)) (tree (cons kr xr yr))))
))

;; bst definition (CVC4 hangs)

(assert (bst empty))
(assert (forall ((k Int))
        (= (bst (cons k empty empty))
           (and (not (= k nil)) (= (leftptr k) nil) (= (rightptr k) nil)
                (< 0 (key k)) (< (key k) 100)))
))
(assert (forall ((k Int) (kl Int) (xl TreeOfLoc) (yl TreeOfLoc))
        (= (bst (cons k (cons kl xl yl) empty))
           (and (= (leftptr k) kl) (= (rightptr k) nil) (not (= k nil))
                (< 0 (key k)) (< (key k) 100) (<= (maxr (cons kl xl yl)) (key k))
                (not (member k (htree (cons kl xl yl))))
                (bst (cons kl xl yl))))
))
(assert (forall ((k Int) (kr Int) (xr TreeOfLoc) (yr TreeOfLoc))
        (= (bst (cons k empty (cons kr xr yr)))
           (and (= (leftptr k) nil) (= (rightptr k) kr) (not (= k nil))
                (< 0 (key k)) (< (key k) 100) (<= (key k) (minr (cons kr xr yr)))
                (not (member k (htree (cons kr xr yr))))
                (bst (cons kr xr yr))))
))
(assert (forall ((k Int) (kl Int) (kr Int) 
                 (xl TreeOfLoc) (yl TreeOfLoc) (xr TreeOfLoc) (yr TreeOfLoc))
        (= (bst (cons k (cons kl xl yl) (cons kr xr yr)))
           (and (= (leftptr k) kl) (= (rightptr k) kr) (not (= k nil))
                (< 0 (key k)) (< (key k) 100)
                (<= (maxr (cons kl xl yl)) (key k)) (<= (key k) (minr (cons kr xr yr)))
                (not (member k (htree (cons kl xl yl))))
                (not (member k (htree (cons kr xr yr))))
                (= (intersection (htree (cons kl xl yl)) (htree (cons kr xr yr)))
                   (as emptyset (Set Int)))
                (bst (cons kl xl yl)) (bst (cons kr xr yr))))
))

(assert true)

(check-sat)
