INFO:root:Adding support of recdef: (SPlist0, [var10], ,If(var10 == nil,
   union(union(K(Int, False), K(Int, False)), K(Int, False)),
   union(union(K(Int, False), K(Int, False)),
         union(union(K(Int, False), SPlist0(next0(var10))),
               union(union(union(Store(K(Int, False),
                                       var10,
                                       True),
                                 union(K(Int, False)))),
                     SPlist0(next0(var10)))))) )
INFO:root:Adding recdef: (list0, [var10], ,If(var10 == nil,
   True,
   And(Not(SPlist0(next0(var10))[var10]),
       list0(next0(var10)))) )
INFO:root:Line of code: Not(x0 == nil)
INFO:root:Line of code: y1 == next0(x0)
INFO:root:Line of code: Not(y1 == nil)
INFO:root:Mutation: next1(free_var) = If(free_var == x0, next0(y1), next0(free_var))
INFO:root:Adding support of recdef: (SPlist1, [var10], ,If(var10 == nil,
   union(union(K(Int, False), K(Int, False)), K(Int, False)),
   union(union(K(Int, False), K(Int, False)),
         union(union(K(Int, False), SPlist1(next1(var10))),
               union(union(union(Store(K(Int, False),
                                       var10,
                                       True),
                                 union(K(Int, False)))),
                     SPlist1(next1(var10)))))) )
INFO:root:Adding recdef: (list1, [var10], ,If(var10 == nil,
   True,
   And(Not(SPlist1(next1(var10))[var10]),
       list1(next1(var10)))) )
INFO:root:Mutation: next2(free_var) = If(free_var == y1, x0, next1(free_var))
INFO:root:Adding support of recdef: (SPlist2, [var10], ,If(var10 == nil,
   union(union(K(Int, False), K(Int, False)), K(Int, False)),
   union(union(K(Int, False), K(Int, False)),
         union(union(K(Int, False), SPlist2(next2(var10))),
               union(union(union(Store(K(Int, False),
                                       var10,
                                       True),
                                 union(K(Int, False)))),
                     SPlist2(next2(var10)))))) )
INFO:root:Adding recdef: (list2, [var10], ,If(var10 == nil,
   True,
   And(Not(SPlist2(next2(var10))[var10]),
       list2(next2(var10)))) )
INFO:root:Line of code: x1 == y1
INFO:root:Modified set is Store(K(Int, False), y1, True)
INFO:root:Frame assumptions:
INFO:root:Implies(subset(intersection(Store(K(Int, False), y1, True),
                            SPlist0(free_var)),
               K(Int, False)),
        list0(free_var) == list2(free_var))
INFO:root:Implies(subset(intersection(Store(K(Int, False), y1, True),
                            SPlist0(free_var)),
               K(Int, False)),
        SPlist0(free_var) == SPlist2(free_var))
INFO:root:Pre: list0(x0)
INFO:root:Tranform: [Not(x0 == nil), y1 == next0(x0), Not(y1 == nil), x1 == y1]
INFO:root:Post: list2(x1)
INFO:root:goal is valid
