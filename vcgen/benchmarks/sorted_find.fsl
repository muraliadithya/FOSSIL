(Var x Loc)
(Var k Int)
(Var ret Int)
(Var tmp Loc)

(Function next Loc Loc)
(Function key Loc Int)
(RecFunction Sorted Loc Bool)
(RecFunction Keys Loc SetInt)

(Var plus_infty Int)
(RecFunction Min Loc Int)
(RecDef (Min x) (ite (= x nil) plus_infty (ite (< (key x) (Min (next x))) (key x) (Min (next x)) ) ))


(RecDef (Sorted x) (ite (= x nil) True (and (Sorted (next x)) (not (IsMember x (Sp (Sorted (antiSp (next x)))))) (<= (key x) (Min (next x))) )))
(RecDef (Keys x) (ite (= x nil) EmptySetInt (SetAdd (Keys (next x)) (key x) ) ))

(Var oldkeysx SetInt)
(Var aux Loc)
(Var oldkeysaux SetInt)
(Var oldnxt Loc)

(lemma (x) (< (key x) plus_infty))
(lemma (x) (=> (Sorted x) (= (SPKeys x) (SPSorted x)) ))

(Program sorted_find (x k oldkeysx ret))
(Pre (Sorted x))
(Post (and
(Sorted x)
(= (Keys x) oldkeysx)
(=> (= ret (IntConst 1)) (IsMember k oldkeysx))
))

(assign oldkeysx (Keys x))
(If (= x nil)
Then
(assign ret (IntConst 0))
(return)
Else
    (If (= (key x) k)
    Then
    (assign ret (IntConst 1))
    (return)
    Else
    (assign aux (next x))
    (assign oldkeysaux (Keys aux))
    (call sorted_find (aux k oldkeysaux ret))
    (return)
    )
)
