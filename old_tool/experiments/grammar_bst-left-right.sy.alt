;; lemma to synthesize
;; TODO: must be generated from problem parameters
(synth-fun lemma ((x Int) (y Int) (nil Int)) Bool
           ((Start Bool) (B1 Bool))

           ((Start Bool (B1
                  (=> B1 B1)))
           (B1 Bool
                  ((<= (key x) (key x))
                   (<= (key x) (key y))
                   (<= (key x) (key nil))
                   (<= (key x) (minr x))
                   (<= (key x) (minr y))
                   (<= (key x) (minr nil))
                   (<= (key x) (maxr x))
                   (<= (key x) (maxr y))
                   (<= (key x) (maxr nil))
                   (<= (key y) (key x))
                   (<= (key y) (key y))
                   (<= (key y) (key nil))
                   (<= (key y) (minr x))
                   (<= (key y) (minr y))
                   (<= (key y) (minr nil))
                   (<= (key y) (maxr x))
                   (<= (key y) (maxr y))
                   (<= (key y) (maxr nil))
                   (<= (key nil) (key x))
                   (<= (key nil) (key y))
                   (<= (key nil) (key nil))
                   (<= (key nil) (minr x))
                   (<= (key nil) (minr y))
                   (<= (key nil) (minr nil))
                   (<= (key nil) (maxr x))
                   (<= (key nil) (maxr y))
                   (<= (key nil) (maxr nil))
                   (<= (minr x) (key x))
                   (<= (minr x) (key y))
                   (<= (minr x) (key nil))
                   (<= (minr x) (minr x))
                   (<= (minr x) (minr y))
                   (<= (minr x) (minr nil))
                   (<= (minr x) (maxr x))
                   (<= (minr x) (maxr y))
                   (<= (minr x) (maxr nil))
                   (<= (minr y) (key x))
                   (<= (minr y) (key y))
                   (<= (minr y) (key nil))
                   (<= (minr y) (minr x))
                   (<= (minr y) (minr y))
                   (<= (minr y) (minr nil))
                   (<= (minr y) (maxr x))
                   (<= (minr y) (maxr y))
                   (<= (minr y) (maxr nil))
                   (<= (minr nil) (key x))
                   (<= (minr nil) (key y))
                   (<= (minr nil) (key nil))
                   (<= (minr nil) (minr x))
                   (<= (minr nil) (minr y))
                   (<= (minr nil) (minr nil))
                   (<= (minr nil) (maxr x))
                   (<= (minr nil) (maxr y))
                   (<= (minr nil) (maxr nil))
                   (<= (maxr x) (key x))
                   (<= (maxr x) (key y))
                   (<= (maxr x) (key nil))
                   (<= (maxr x) (minr x))
                   (<= (maxr x) (minr y))
                   (<= (maxr x) (minr nil))
                   (<= (maxr x) (maxr x))
                   (<= (maxr x) (maxr y))
                   (<= (maxr x) (maxr nil))
                   (<= (maxr y) (key x))
                   (<= (maxr y) (key y))
                   (<= (maxr y) (key nil))
                   (<= (maxr y) (minr x))
                   (<= (maxr y) (minr y))
                   (<= (maxr y) (minr nil))
                   (<= (maxr y) (maxr x))
                   (<= (maxr y) (maxr y))
                   (<= (maxr y) (maxr nil))
                   (<= (maxr nil) (key x))
                   (<= (maxr nil) (key y))
                   (<= (maxr nil) (key nil))
                   (<= (maxr nil) (minr x))
                   (<= (maxr nil) (minr y))
                   (<= (maxr nil) (minr nil))
                   (<= (maxr nil) (maxr x))
                   (<= (maxr nil) (maxr y))
                   (<= (maxr nil) (maxr nil))
                   (member x (hbst x))
                   (member x (hbst y))
                   (member y (hbst x))
                   (member y (hbst y)))))
)

(synth-fun rswitch () Int
           ((Start Int))
           ((Start Int (0)))
)
